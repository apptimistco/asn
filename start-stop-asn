#! /bin/sh
### BEGIN INIT INFO
# Provides:          asn
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: asn initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Tom Grennan <tom@apptimist.co>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"
# set -x

PATH=/sbin:/bin:/usr/sbin:/usr/bin
DESC="Apptimist Social Network Server"
NAME=asn
DAEMON=/usr/sbin/$NAME
PIDFILE=/var/run/$NAME.pid
LOGFILE=/var/log/$NAME.log
SCRIPTNAME=/etc/init.d/$NAME

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

[ "$CONFIG" = "" ] && CONFIG=/etc/$NAME.yaml
[ "$CHRDIR" = "" ] && CHRDIR=/var/chroot/$NAME
[ "$WORKDIR" = "" ] && WORKDIR=/var/lib/$NAME

# Exit if the package is not installed
[ -x "$CHRDIR/$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	[ -d $CHRDIR/proc ] || mkdir -m 0555 $CHRDIR/proc
	grep -q $CHRDIR/proc /proc/mounts || mount -B /proc $CHRDIR/proc
	[ -d $CHRDIR/dev ] || mkdir -m 0755 $CHRDIR/dev
	grep -q $CHRDIR/dev /proc/mounts || mount -B /dev $CHRDIR/dev
	[ -d $CHRDIR/tmp ] || mkdir -m 0777 $CHRDIR/tmp
	grep -q $CHRDIR/tmp /proc/mounts || mount -B /tmp $CHRDIR/tmp
	[ -d $CHRDIR/var ] || mkdir -m 0755 $CHRDIR/var
	if [ -d /run ] ; then
		[ -d $CHRDIR/run ] || mkdir -m 0755 $CHRDIR/run
		grep -q $CHRDIR/run /proc/mounts || mount -B /run $CHRDIR/run
		ln -sf ../run $CHRDIR/var/run
	else
		[ -d $CHRDIR/var/run ] || mkdir -m 0755 $CHRDIR/var/run
		grep -q $CHRDIR/var/run /proc/mounts ||
			mount -B /var/run $CHRDIR/var/run
	fi
	LOGDIR=`dirname $LOGFILE`
	[ -d $CHRDIR/$LOGDIR ] || mkdir -p -m 0775 $CHRDIR/$LOGDIR
	[ -d $CHRDIR/$WORKDIR ] || mkdir -p -m 0755 $CHRDIR/$WORKDIR

	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet -p $PIDFILE \
		-r $CHRDIR -d $WORKDIR \
		-x $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet -p $PIDFILE \
		-r $CHRDIR -d $WORKDIR -b -m \
		-x $DAEMON -- -config $CONFIG -log $LOGFILE \
		|| return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/10/KILL/5 --name $NAME \
		-p $CHRDIR$PIDFILE
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 \
		-r $CHRDIR -x $DAEMON
	[ "$?" = 2 ] && return 2
	rm -f $CHRDIR$PIDFILE
	grep -q $CHRDIR/proc /proc/mounts && umount $CHRDIR/proc
	grep -q $CHRDIR/dev /proc/mounts && umount $CHRDIR/dev
	grep -q $CHRDIR/tmp /proc/mounts && umount $CHRDIR/tmp
	grep -q $CHRDIR/run /proc/mounts && umount $CHRDIR/run
	grep -q $CHRDIR/var/run /proc/mounts && umount $CHRDIR/var/run
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --name $NAME \
		-p $CHRDIR$PIDFILE
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc -p $CHRDIR$PIDFILE "$DAEMON" "$NAME" &&
		exit 0 || exit $?
	;;
  #reload|force-reload)
	#
	# Until do_reload() is implemented,  leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# When "reload" is implemented, remove the 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
